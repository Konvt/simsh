# simsh - The simple implementation of shell

**Contents**
- [simsh - The simple implementation of shell](#simsh---the-simple-implementation-of-shell)
  - [Features](#features)
  - [How to build](#how-to-build)
    - [xmake (recommended)](#xmake-recommended)
    - [Makefile](#makefile)
    - [CMake](#cmake)
    - [Binary](#binary)
  - [How to use](#how-to-use)
- [simsh - Shell 的简单实现 - zh\_cn](#simsh---shell-的简单实现---zh_cn)
  - [特点](#特点)
  - [如何构建](#如何构建)
    - [xmake（推荐）](#xmake推荐)
    - [Makefile](#makefile-1)
    - [CMake](#cmake-1)
    - [Binary](#binary-1)
  - [如何使用](#如何使用)

A simple Linux Shell written in Modern C++.

## Features
- Supports nested statements
- Supports most redirection features
- Syntax parsing based on recursive descent method
- Modular design
- Complies with Modern C++ standards

## How to build
The syntax standard used is C++20 (with ranges and format), so the compiler required for building should be at least g++ 13 or clang 14.

The project provides three build methods, **but it is recommended not to use two or more build tools simultaneously.**

Each method assumes that the compilation tools **fully support `std::ranges` or `std::format`**.
### xmake (recommended)
```xmake
xmake
```
### Makefile
```makefile
make
```
### CMake
The project's `CMakeLists.txt` is generated by `xmake`, and its usability is not guaranteed; if you have `xmake` and prefer to use `CMake`, you can generate `CMakeLists.txt` using `xmake project -k cmake`.
```cmake
cmake -S . -B build && cmake --build build
```
### Binary
Due to some functions depending on `glibc`, the [binary file]() is not guaranteed to run correctly.

For more details, refer to the build environment statement in the [Releases]() section.

## How to use

- - -

# simsh - Shell 的简单实现 - zh_cn

一个由 Modern C++ 编写的、简单的 Linux Shell。

## 特点
- 支持嵌套语句
- 支持大部分重定向功能
- 基于递归下降法进行语法解析
- 模块化设计
- 遵循 Modern C++ 规范

## 如何构建
使用的语法标准为 C++20（with `ranges` and `format`），故构建时的编译器需要至少是 g++ 13，或 clang 14

项目提供了三种构建方式，**但这里建议不要同时使用两种及以上的构建工具**。

每种方式都假定使用的编译工具**已完全支持 `std::ranges` 或 `std::format`**。
### xmake（推荐）
```xmake
xmake
```
### Makefile
```makefile
make
```
### CMake
项目的 `CMakeLists.txt` 是由 `xmake` 生成的，不保证绝对可用；如果你有 `xmake` 且更偏好使用 `CMake`，可以使用 `xmake project -k cmake` 生成 `CMakeLists.txt`。
```cmake
cmake -S . -B build && cmake --build build
```
### Binary
因为部分函数依赖于 `glibc`，因此不保证[二进制文件]()能够正常运行。

详情可以参照 [Releases]() 中的构建环境声明。

## 如何使用
